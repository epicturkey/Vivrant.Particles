//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vivrant.Particles.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Vivrant.Particles.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function generateParticles()
        ///{
        ///    incrParticleCount = $0();
        ///    setTimeout(function () {
        ///    renderParticle();
        ///    if (incrParticleCount &lt;= $1())
        ///        generateParticles();
        ///    }, $2());
        ///}.
        /// </summary>
        internal static string generateParticles {
            get {
                return ResourceManager.GetString("generateParticles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function getParticleSprite()
        ///{
        ///    // sprite
        ///    var spriteparts = $0();
        ///     // c# get sprite property array
        ///    var sprite = spriteparts[&quot;sprite&quot;];
        ///    // color
        ///    var color = spriteparts[&quot;color&quot;];
        ///    // speed
        ///    var speed = spriteparts[&quot;speed&quot;];
        ///    // size
        ///    var startSize = spriteparts[&quot;startSize&quot;];
        ///    var endSize = spriteparts[&quot;endSize&quot;];
        ///    // rotation
        ///    var startRotation = spriteparts[&quot;startRotation&quot;];
        ///    var endRotation = spriteparts[&quot;endRotation&quot;];
        ///    // horizontal shift        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string getParticleSprite {
            get {
                return ResourceManager.GetString("getParticleSprite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function RandomNumber(min, max) {
        ///    return Math.floor(Math.random() * (max - min + 1) + min);
        ///}.
        /// </summary>
        internal static string RandomNumber {
            get {
                return ResourceManager.GetString("RandomNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///function renderParticle() {
        ///    // generate particle element
        ///    var spriteParts = getParticleSprite();
        ///    var particlePanel = $(&apos;&lt;div class=$0 style=&quot;position:absolute;&quot;&gt;&lt;/div&gt;&apos;);
        ///    particlePanel.html(spriteParts[&quot;sprite&quot;]);
        ///    $(containerClass).prepend(particlePanel);
        ///
        ///    //create particle animation values
        ///    setElementStartRotation(particlePanel, spriteParts[&quot;startRotation&quot;])
        ///    particlePanel.css({
        ///        color: spriteParts[&quot;color&quot;].toString(),
        ///        top: spriteParts[&quot;startY&quot;].toSt [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string renderParticle {
            get {
                return ResourceManager.GetString("renderParticle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///    function setElementStartRotation(el, angle)
        ///    {
        ///        //set start values
        ///        if(angle != 0)
        ///        {
        ///          while(angle &lt; 0) angle = angle + 360;
        ///          while(angle &gt; 360) angle = angle - 360;
        ///          var ieQuadRotation = angle / 4;
        ///          var ieRotation = 0;
        ///          if(ieQuadRotation &gt; 315 || ieQuadRotation &lt; 45) ieRotation = 0;
        ///          if(ieQuadRotation &gt;= 45 &amp;&amp; ieQuadRotation &lt; 135) ieRotation = 1;
        ///          if(ieQuadRotation &gt;= 135 &amp;&amp; ieQuadRotation &lt; 225) ieRota [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string setElementStartRotation {
            get {
                return ResourceManager.GetString("setElementStartRotation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///setInterval(checkFocus, 1500);
        ///function checkFocus() {
        ///    $0(document.hasFocus());
        ///}.
        /// </summary>
        internal static string WindowFocusCheck {
            get {
                return ResourceManager.GetString("WindowFocusCheck", resourceCulture);
            }
        }
    }
}
